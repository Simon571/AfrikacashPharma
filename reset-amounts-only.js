const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function resetSalesAndExpensesAmounts() {
  try {
    console.log('üîÑ R√©initialisation des montants des ventes et d√©penses...\n');

    // Compter les donn√©es avant modification
    const salesCount = await prisma.sale.count();
    const saleItemsCount = await prisma.saleItem.count();
    const expensesCount = await prisma.expense.count();

    console.log('üìä Donn√©es √† modifier:');
    console.log(`   ‚Ä¢ Ventes: ${salesCount}`);
    console.log(`   ‚Ä¢ Articles vendus: ${saleItemsCount}`);
    console.log(`   ‚Ä¢ D√©penses: ${expensesCount}`);
    console.log('');

    if (salesCount === 0 && saleItemsCount === 0 && expensesCount === 0) {
      console.log('‚ùå Aucune donn√©e de vente ou de d√©pense trouv√©e.');
      return;
    }

    console.log('üîÑ R√©initialisation des montants en cours...\n');

    // Remettre √† z√©ro les montants des ventes
    const updatedSales = await prisma.sale.updateMany({
      data: {
        totalAmount: 0,
        discount: 0
      }
    });
    console.log(`‚úÖ ${updatedSales.count} ventes - montants remis √† z√©ro`);

    // Remettre √† z√©ro les articles de vente
    const updatedSaleItems = await prisma.saleItem.updateMany({
      data: {
        quantity: 0,
        unitPrice: 0,
        totalPrice: 0
      }
    });
    console.log(`‚úÖ ${updatedSaleItems.count} articles vendus - montants remis √† z√©ro`);

    // Remettre √† z√©ro les d√©penses
    const updatedExpenses = await prisma.expense.updateMany({
      data: {
        amount: 0
      }
    });
    console.log(`‚úÖ ${updatedExpenses.count} d√©penses - montants remis √† z√©ro`);

    console.log('\nüéØ R√©initialisation des montants termin√©e!');
    console.log('');
    console.log('üìä Nouvelles valeurs:');
    console.log('   ‚Ä¢ Montants des ventes: 0 CDF');
    console.log('   ‚Ä¢ Quantit√©s vendues: 0');
    console.log('   ‚Ä¢ Prix unitaires: 0 CDF');
    console.log('   ‚Ä¢ Montants des d√©penses: 0 CDF');
    console.log('');
    console.log('üìù Note: Les enregistrements sont conserv√©s mais avec des montants √† z√©ro');
    console.log('‚ú® Vous pouvez maintenant mettre √† jour les montants selon vos besoins!');

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Demander confirmation avant de proc√©der
console.log('‚ö†Ô∏è  ATTENTION: Cette action va remettre √† Z√âRO tous les montants!');
console.log('   - Tous les montants de ventes seront mis √† 0');
console.log('   - Toutes les quantit√©s vendues seront mises √† 0');
console.log('   - Tous les montants de d√©penses seront mis √† 0');
console.log('   - Les enregistrements seront CONSERV√âS (pas de suppression)');
console.log('');

const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('√ätes-vous s√ªr de vouloir remettre √† Z√âRO tous les montants? (tapez "ZERO" pour confirmer): ', (answer) => {
  if (answer.toUpperCase() === 'ZERO') {
    resetSalesAndExpensesAmounts();
  } else {
    console.log('‚ùå Op√©ration annul√©e.');
  }
  rl.close();
});