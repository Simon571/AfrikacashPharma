generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  username     String     @unique
  passwordHash String
  role         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  auditLogs      AuditLog[]
  sales          Sale[]
  expenses       Expense[]
  stockMovements StockMovement[]
}

model Medication {
  id                 String     @id @default(cuid())
  name               String
  pharmaceuticalForm String
  purchasePrice      Float
  price              Float
  quantity           Int
  expirationDate     DateTime
  barcode            String?    @unique
  isAvailableForSale Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  saleItems          SaleItem[]
  stockMovements     StockMovement[]
}

model Client {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

model Sale {
  id             String     @id @default(cuid())
  date           DateTime   @default(now())
  totalAmount    Float
  amountPaid     Float
  changeDue      Float
  paymentMethod  String
  additionalFees Float      @default(0)
  discount       Float      @default(0)
  remarks        String?
  sellerId       String
  clientId       String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  client         Client     @relation(fields: [clientId], references: [id])
  seller         User       @relation(fields: [sellerId], references: [id])
  items          SaleItem[]
}

model SaleItem {
  id           String     @id @default(cuid())
  saleId       String
  medicationId String
  quantity     Int
  priceAtSale  Float
  medication   Medication @relation(fields: [medicationId], references: [id])
  sale         Sale       @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  model     String
  recordId  String
  userId    String
  timestamp DateTime @default(now())
  oldValue  String?
  newValue  String?
  user      User     @relation(fields: [userId], references: [id])
}

model InvoiceSettings {
  id             String   @id @default(cuid())
  companyName    String
  companyAddress String
  companyPhone   String
  companyEmail   String
  headerText     String?
  footerText     String?
  logoUrl        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Expense {
  id           String   @id @default(cuid())
  description  String
  amount       Float
  category     String?
  date         DateTime @default(now())
  registeredBy String
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

// Mouvement de stock (entrées, sorties, corrections)
model StockMovement {
  id            String     @id @default(cuid())
  medicationId  String
  userId        String
  type          MovementType
  quantity      Int
  reason        String?
  previousStock Int        // stock avant l'opération
  newStock      Int        // stock après
  createdAt     DateTime   @default(now())
  medication    Medication @relation(fields: [medicationId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
}

enum MovementType {
  ENTRY
  EXIT
  CORRECTION
}
