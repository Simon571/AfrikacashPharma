import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

/**
 * API de test pour valider le syst√®me de p√©riode d'essai
 * GET /api/trial/test - Test complet du syst√®me
 */

export async function GET(request: NextRequest) {
  try {
    console.log('üß™ D√©but des tests du syst√®me d\'essai...');

    const results = {
      database: { success: false, message: '' },
      apis: { success: false, message: '' },
      middleware: { success: false, message: '' },
      overall: { success: false, message: '' }
    };

    // Test 1: Connexion √† la base de donn√©es
    try {
      await prisma.$connect();
      
      // V√©rifier les nouveaux champs (si disponibles)
      const userCount = await prisma.user.count();
      
      results.database = {
        success: true,
        message: `‚úÖ Base de donn√©es accessible. ${userCount} utilisateurs trouv√©s.`
      };
    } catch (error) {
      results.database = {
        success: false,
        message: `‚ùå Erreur base de donn√©es: ${String(error)}`
      };
    }

    // Test 2: APIs d'essai
    try {
      // Tester l'API de v√©rification d'acc√®s
      const accessResponse = await fetch(`${process.env.NEXTAUTH_URL}/api/trial/check-access`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': request.headers.get('Cookie') || ''
        },
        body: JSON.stringify({ feature: 'inventory-management' })
      });

      if (accessResponse.status === 401) {
        results.apis = {
          success: true,
          message: '‚úÖ API de v√©rification d\'acc√®s fonctionne (non authentifi√© d√©tect√©)'
        };
      } else {
        const accessData = await accessResponse.json();
        results.apis = {
          success: true,
          message: `‚úÖ API de v√©rification d'acc√®s r√©pond: ${JSON.stringify(accessData)}`
        };
      }
    } catch (error) {
      results.apis = {
        success: false,
        message: `‚ùå Erreur API: ${String(error)}`
      };
    }

    // Test 3: Middleware (simulation)
    try {
      results.middleware = {
        success: true,
        message: '‚úÖ Middleware int√©gr√© (v√©rification manuelle requise)'
      };
    } catch (error) {
      results.middleware = {
        success: false,
        message: `‚ùå Erreur middleware: ${String(error)}`
      };
    }

    // √âvaluation globale
    const allSuccess = results.database.success && results.apis.success && results.middleware.success;
    results.overall = {
      success: allSuccess,
      message: allSuccess 
        ? 'üéâ Tous les tests sont pass√©s avec succ√®s!' 
        : '‚ö†Ô∏è  Certains tests ont √©chou√©, v√©rifiez les d√©tails.'
    };

    console.log('üß™ Tests termin√©s:', results);

    return NextResponse.json({
      success: results.overall.success,
      message: 'Tests du syst√®me d\'essai termin√©s',
      results,
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV
    });

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur lors de l\'ex√©cution des tests',
      details: String(error)
    }, { status: 500 });
  }
}

/**
 * POST /api/trial/test - Initialiser des donn√©es de test
 */
export async function POST(request: NextRequest) {
  try {
    const { action } = await request.json();

    if (action === 'setup-test-data') {
      // Cr√©er des utilisateurs de test si n√©cessaire
      const existingUsers = await prisma.user.findMany({
        select: { id: true, username: true, role: true }
      });

      return NextResponse.json({
        success: true,
        message: 'Donn√©es de test v√©rifi√©es',
        users: existingUsers.map(u => ({ 
          id: u.id, 
          username: u.username, 
          role: u.role 
        }))
      });
    }

    return NextResponse.json({
      success: false,
      message: 'Action non reconnue'
    }, { status: 400 });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des donn√©es de test:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur lors de l\'initialisation des donn√©es de test',
      details: String(error)
    }, { status: 500 });
  }
}