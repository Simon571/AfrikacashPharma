const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function resetMedicationsData() {
  try {
    console.log('üîÑ R√©initialisation des donn√©es des m√©dicaments...\n');

    // Compter le nombre total de m√©dicaments avant la r√©initialisation
    const totalMedications = await prisma.medication.count();
    console.log(`üìä Nombre total de m√©dicaments √† r√©initialiser: ${totalMedications}`);

    if (totalMedications === 0) {
      console.log('‚ùå Aucun m√©dicament trouv√© dans la base de donn√©es.');
      return;
    }

    // R√©initialiser toutes les donn√©es des m√©dicaments
    const result = await prisma.medication.updateMany({
      data: {
        quantity: 0,                    // Quantit√© √† z√©ro
        price: 0,                       // Prix de vente √† z√©ro
        purchasePrice: 0,               // Prix d'achat √† z√©ro
        expirationDate: new Date('2025-01-01'), // Date d'expiration par d√©faut
        isAvailableForSale: false,      // Non disponible √† la vente
        barcode: null                   // Code-barres vide
      }
    });

    console.log(`‚úÖ ${result.count} m√©dicaments ont √©t√© r√©initialis√©s avec succ√®s!\n`);

    // Afficher un √©chantillon des m√©dicaments r√©initialis√©s
    const sampleMedications = await prisma.medication.findMany({
      take: 10,
      select: {
        id: true,
        name: true,
        pharmaceuticalForm: true,
        quantity: true,
        price: true,
        purchasePrice: true,
        expirationDate: true,
        isAvailableForSale: true
      },
      orderBy: { name: 'asc' }
    });

    console.log('üìã √âchantillon des m√©dicaments r√©initialis√©s:');
    console.log('‚ïê'.repeat(80));
    sampleMedications.forEach((med, index) => {
      console.log(`${index + 1}. ${med.name} (${med.pharmaceuticalForm})`);
      console.log(`   - Quantit√©: ${med.quantity}`);
      console.log(`   - Prix d'achat: ${med.purchasePrice} CDF`);
      console.log(`   - Prix de vente: ${med.price} CDF`);
      console.log(`   - Date d'expiration: ${med.expirationDate.toLocaleDateString()}`);
      console.log(`   - Disponible: ${med.isAvailableForSale ? 'Oui' : 'Non'}`);
      console.log('');
    });

    console.log('üéØ Toutes les donn√©es des m√©dicaments ont √©t√© r√©initialis√©es:');
    console.log('   ‚Ä¢ Quantit√©s: 0');
    console.log('   ‚Ä¢ Prix d\'achat: 0 CDF');
    console.log('   ‚Ä¢ Prix de vente: 0 CDF');
    console.log('   ‚Ä¢ Date d\'expiration: 01/01/2025');
    console.log('   ‚Ä¢ Disponibilit√©: Non');
    console.log('   ‚Ä¢ Code-barres: Vide');
    console.log('\n‚ú® Les m√©dicaments sont maintenant pr√™ts √† √™tre mis √† jour avec de nouvelles donn√©es!');

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Demander confirmation avant de proc√©der
console.log('‚ö†Ô∏è  ATTENTION: Cette action va r√©initialiser TOUTES les donn√©es des m√©dicaments!');
console.log('   - Les quantit√©s seront mises √† 0');
console.log('   - Les prix seront mis √† 0');
console.log('   - Les dates d\'expiration seront remises au 01/01/2025');
console.log('   - Tous les m√©dicaments seront marqu√©s comme non disponibles');
console.log('');

const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('√ätes-vous s√ªr de vouloir continuer? (tapez "OUI" pour confirmer): ', (answer) => {
  if (answer.toUpperCase() === 'OUI') {
    resetMedicationsData();
  } else {
    console.log('‚ùå Op√©ration annul√©e.');
  }
  rl.close();
});