const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function resetSalesAndExpenses() {
  try {
    console.log('üîÑ R√©initialisation de l\'historique des ventes et des d√©penses...\n');

    // Compter les donn√©es avant suppression
    const salesCount = await prisma.sale.count();
    const saleItemsCount = await prisma.saleItem.count();
    const expensesCount = await prisma.expense.count();
    const clientsCount = await prisma.client.count();

    console.log('üìä Donn√©es actuelles dans la base:');
    console.log(`   ‚Ä¢ Ventes: ${salesCount}`);
    console.log(`   ‚Ä¢ Articles vendus: ${saleItemsCount}`);
    console.log(`   ‚Ä¢ D√©penses: ${expensesCount}`);
    console.log(`   ‚Ä¢ Clients: ${clientsCount}`);
    console.log('');

    if (salesCount === 0 && saleItemsCount === 0 && expensesCount === 0 && clientsCount === 0) {
      console.log('‚ùå Aucune donn√©e de vente ou de d√©pense trouv√©e.');
      return;
    }

    // Afficher un √©chantillon des donn√©es √† supprimer
    if (salesCount > 0) {
      const sampleSales = await prisma.sale.findMany({
        take: 3,
        include: {
          client: true,
          seller: true,
          items: {
            include: {
              medication: true
            }
          }
        },
        orderBy: { createdAt: 'desc' }
      });

      console.log('üìã √âchantillon des ventes √† supprimer:');
      sampleSales.forEach((sale, index) => {
        console.log(`${index + 1}. Vente #${sale.id.substring(0, 8)}... - ${sale.totalAmount} CDF`);
        console.log(`   Client: ${sale.client?.name || 'Inconnu'}`);
        console.log(`   Vendeur: ${sale.seller?.username || 'Inconnu'}`);
        console.log(`   Date: ${sale.createdAt.toLocaleDateString()}`);
        console.log(`   Articles: ${sale.items.length}`);
        console.log('');
      });
    }

    if (expensesCount > 0) {
      const sampleExpenses = await prisma.expense.findMany({
        take: 3,
        include: {
          user: true
        },
        orderBy: { createdAt: 'desc' }
      });

      console.log('üí∏ √âchantillon des d√©penses √† supprimer:');
      sampleExpenses.forEach((expense, index) => {
        console.log(`${index + 1}. D√©pense #${expense.id.substring(0, 8)}... - ${expense.amount} CDF`);
        console.log(`   Description: ${expense.description}`);
        console.log(`   Cat√©gorie: ${expense.category}`);
        console.log(`   Utilisateur: ${expense.user?.name || 'Inconnu'}`);
        console.log(`   Date: ${expense.createdAt.toLocaleDateString()}`);
        console.log('');
      });
    }

    console.log('üóëÔ∏è  Suppression en cours...\n');

    // Supprimer dans l'ordre correct (contraintes de cl√©s √©trang√®res)
    
    // 1. Supprimer les articles de vente (SaleItem)
    const deletedSaleItems = await prisma.saleItem.deleteMany({});
    console.log(`‚úÖ ${deletedSaleItems.count} articles de vente supprim√©s`);

    // 2. Supprimer les ventes (Sale)
    const deletedSales = await prisma.sale.deleteMany({});
    console.log(`‚úÖ ${deletedSales.count} ventes supprim√©es`);

    // 3. Supprimer les d√©penses (Expense)
    const deletedExpenses = await prisma.expense.deleteMany({});
    console.log(`‚úÖ ${deletedExpenses.count} d√©penses supprim√©es`);

    // 4. Supprimer les clients (Client)
    const deletedClients = await prisma.client.deleteMany({});
    console.log(`‚úÖ ${deletedClients.count} clients supprim√©s`);

    console.log('\nüéØ R√©initialisation termin√©e avec succ√®s!');
    console.log('');
    console.log('üìä √âtat final:');
    console.log('   ‚Ä¢ Historique des ventes: Vide');
    console.log('   ‚Ä¢ Articles vendus: Vide');
    console.log('   ‚Ä¢ D√©penses: Vides');
    console.log('   ‚Ä¢ Clients: Vide');
    console.log('');
    console.log('‚ú® Le syst√®me est maintenant pr√™t pour de nouvelles donn√©es!');
    console.log('');
    console.log('üìà Vous pouvez maintenant:');
    console.log('   ‚Ä¢ Cr√©er de nouvelles ventes');
    console.log('   ‚Ä¢ Ajouter de nouveaux clients');
    console.log('   ‚Ä¢ Enregistrer de nouvelles d√©penses');
    console.log('   ‚Ä¢ Consulter des rapports vierges');

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Demander confirmation avant de proc√©der
console.log('‚ö†Ô∏è  ATTENTION: Cette action va SUPPRIMER TOUTES les donn√©es de ventes et de d√©penses!');
console.log('   - Toutes les ventes seront d√©finitivement supprim√©es');
console.log('   - Tous les articles vendus seront supprim√©s');
console.log('   - Toutes les d√©penses seront supprim√©es');
console.log('   - Tous les clients seront supprim√©s');
console.log('   - Cette action est IRR√âVERSIBLE');
console.log('');

const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('√ätes-vous s√ªr de vouloir SUPPRIMER tout l\'historique? (tapez "SUPPRIMER" pour confirmer): ', (answer) => {
  if (answer.toUpperCase() === 'SUPPRIMER') {
    resetSalesAndExpenses();
  } else {
    console.log('‚ùå Op√©ration annul√©e.');
  }
  rl.close();
});